/* tslint:disable */
/* eslint-disable */
/**
 * aom-microservice-admin-api-gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.8.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AdminAccountInfoAO
 */
export interface AdminAccountInfoAO {
    /**
     * 
     * @type {number}
     * @memberof AdminAccountInfoAO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AdminAccountInfoAO
     */
    'thirdPartyLoginId': string;
    /**
     * 
     * @type {string}
     * @memberof AdminAccountInfoAO
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AdminAccountInfoAO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminAccountInfoAO
     */
    'avatar'?: string;
}
/**
 * 
 * @export
 * @interface AdminGetStageAO
 */
export interface AdminGetStageAO {
    /**
     * 
     * @type {string}
     * @memberof AdminGetStageAO
     */
    'gameArea': AdminGetStageAOGameAreaEnum;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'playingGameTotalCount': number;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'matchmakingTotalCount': number;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'totalCount': number;
    /**
     * 
     * @type {string}
     * @memberof AdminGetStageAO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AdminGetStageAO
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'order': number;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'gameTotalBankerRotateRound': number;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'gameBaseBet': number;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'gameBonus': number;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'playerCount': number;
    /**
     * 
     * @type {string}
     * @memberof AdminGetStageAO
     */
    'gameCurrency': AdminGetStageAOGameCurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof AdminGetStageAO
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof AdminGetStageAO
     */
    'status': AdminGetStageAOStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'gameSecond': number;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'seasonId'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'roundSystemFeeRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'gameSystemFeeRate': number;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'pointWeighted'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'circleFee'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdminGetStageAO
     */
    'circleFeeCurrency'?: AdminGetStageAOCircleFeeCurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof AdminGetStageAO
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminGetStageAO
     */
    'character': string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminGetStageAO
     */
    'isUpdated': boolean;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'winGameExperience': number;
    /**
     * 
     * @type {number}
     * @memberof AdminGetStageAO
     */
    'lossGameExperience': number;
    /**
     * 
     * @type {string}
     * @memberof AdminGetStageAO
     */
    'dailyCloseStartAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminGetStageAO
     */
    'dailyCloseEndAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdminGetStageAO
     */
    'isDailyCloseEnable'?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum AdminGetStageAOGameAreaEnum {
    ENTERTAINMENT = 'MAHJONG_ENTERTAINMENT',
    QUALIFYING = 'MAHJONG_QUALIFYING'
}
/**
    * @export
    * @enum {string}
    */
export enum AdminGetStageAOGameCurrencyEnum {
    SILVER_COIN = 'SILVER_COIN',
    GOLD_COIN = 'GOLD_COIN',
    CRYSTAL_DIAMOND = 'CRYSTAL_DIAMOND'
}
/**
    * @export
    * @enum {string}
    */
export enum AdminGetStageAOStatusEnum {
    OPEN = 'OPEN',
    CLOSED = 'CLOSED',
    DELETED = 'DELETED'
}
/**
    * @export
    * @enum {string}
    */
export enum AdminGetStageAOCircleFeeCurrencyEnum {
    SILVER_COIN = 'SILVER_COIN',
    GOLD_COIN = 'GOLD_COIN',
    CRYSTAL_DIAMOND = 'CRYSTAL_DIAMOND'
}

/**
 * 
 * @export
 * @interface AdminLoginCodeDTO
 */
export interface AdminLoginCodeDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminLoginCodeDTO
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface AdminLoginTokenDTO
 */
export interface AdminLoginTokenDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminLoginTokenDTO
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface AdminLogoutDTO
 */
export interface AdminLogoutDTO {
    /**
     * 
     * @type {string}
     * @memberof AdminLogoutDTO
     */
    'refreshToken': string;
    /**
     * 
     * @type {string}
     * @memberof AdminLogoutDTO
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface AdminPayloadAO
 */
export interface AdminPayloadAO {
    /**
     * 
     * @type {number}
     * @memberof AdminPayloadAO
     */
    'totalCount': number;
    /**
     * 
     * @type {number}
     * @memberof AdminPayloadAO
     */
    'inGameCount': number;
    /**
     * 
     * @type {number}
     * @memberof AdminPayloadAO
     */
    'inMatchmakingCount': number;
    /**
     * 
     * @type {object}
     * @memberof AdminPayloadAO
     */
    'extra'?: object;
    /**
     * 
     * @type {StageAO}
     * @memberof AdminPayloadAO
     */
    'stageInfo': StageAO;
    /**
     * 
     * @type {MatchmakingConfigAO}
     * @memberof AdminPayloadAO
     */
    'config': MatchmakingConfigAO;
    /**
     * 
     * @type {Array<FindAdminSyncMatchmakingGamerAO>}
     * @memberof AdminPayloadAO
     */
    'matchmakingGamers': Array<FindAdminSyncMatchmakingGamerAO>;
    /**
     * 
     * @type {Array<FindAdminSyncGameGameAO>}
     * @memberof AdminPayloadAO
     */
    'playingGames': Array<FindAdminSyncGameGameAO>;
}
/**
 * 
 * @export
 * @interface AppAssetBundleVersionAO
 */
export interface AppAssetBundleVersionAO {
    /**
     * 設備平台
     * @type {string}
     * @memberof AppAssetBundleVersionAO
     */
    'platform': AppAssetBundleVersionAOPlatformEnum;
    /**
     * 版本訊息
     * @type {string}
     * @memberof AppAssetBundleVersionAO
     */
    'message': string;
    /**
     * APP 資源包版本
     * @type {string}
     * @memberof AppAssetBundleVersionAO
     */
    'version': string;
    /**
     * APP 資源包 host
     * @type {string}
     * @memberof AppAssetBundleVersionAO
     */
    'host': string;
}

/**
    * @export
    * @enum {string}
    */
export enum AppAssetBundleVersionAOPlatformEnum {
    ANDROID = 'ANDROID',
    IOS = 'IOS'
}

/**
 * 
 * @export
 * @interface AppVersionAO
 */
export interface AppVersionAO {
    /**
     * 設備平台
     * @type {string}
     * @memberof AppVersionAO
     */
    'platform': AppVersionAOPlatformEnum;
    /**
     * 版本訊息
     * @type {string}
     * @memberof AppVersionAO
     */
    'message': string;
    /**
     * 更新網址
     * @type {string}
     * @memberof AppVersionAO
     */
    'updateUrl': string;
    /**
     * APP 版本
     * @type {string}
     * @memberof AppVersionAO
     */
    'version': string;
    /**
     * APP 資源包版本
     * @type {string}
     * @memberof AppVersionAO
     */
    'assetBundleVersion': string;
    /**
     * 版本狀態, IS_EXISTS 送審、NEED_UPDATE 強制更新、PUBLISH 發布
     * @type {string}
     * @memberof AppVersionAO
     */
    'status': AppVersionAOStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AppVersionAOPlatformEnum {
    ANDROID = 'ANDROID',
    IOS = 'IOS'
}
/**
    * @export
    * @enum {string}
    */
export enum AppVersionAOStatusEnum {
    DEVELOPING = 'DEVELOPING',
    IN_REVIEW = 'IN_REVIEW',
    IS_EXISTS = 'IS_EXISTS',
    NEED_UPDATE = 'NEED_UPDATE',
    PUBLISH = 'PUBLISH',
    DEPRECATED = 'DEPRECATED',
    MAINTAIN = 'MAINTAIN'
}

/**
 * 
 * @export
 * @interface AuthAOImp
 */
export interface AuthAOImp {
    /**
     * 
     * @type {string}
     * @memberof AuthAOImp
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAOImp
     */
    'refreshToken': string;
    /**
     * 
     * @type {string}
     * @memberof AuthAOImp
     */
    'expireAt': string;
}
/**
 * 
 * @export
 * @interface CheckAndFindCurrentAppVersionAO
 */
export interface CheckAndFindCurrentAppVersionAO {
    /**
     * 設備平台
     * @type {string}
     * @memberof CheckAndFindCurrentAppVersionAO
     */
    'platform': CheckAndFindCurrentAppVersionAOPlatformEnum;
    /**
     * 版本訊息
     * @type {string}
     * @memberof CheckAndFindCurrentAppVersionAO
     */
    'message': string;
    /**
     * 更新網址
     * @type {string}
     * @memberof CheckAndFindCurrentAppVersionAO
     */
    'updateUrl': string;
    /**
     * APP 版本
     * @type {string}
     * @memberof CheckAndFindCurrentAppVersionAO
     */
    'version': string;
    /**
     * APP 資源包版本
     * @type {string}
     * @memberof CheckAndFindCurrentAppVersionAO
     */
    'assetBundleVersion': string;
    /**
     * 版本狀態, IS_EXISTS 送審、NEED_UPDATE 強制更新、PUBLISH 發布
     * @type {string}
     * @memberof CheckAndFindCurrentAppVersionAO
     */
    'status': CheckAndFindCurrentAppVersionAOStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CheckAndFindCurrentAppVersionAOPlatformEnum {
    ANDROID = 'ANDROID',
    IOS = 'IOS'
}
/**
    * @export
    * @enum {string}
    */
export enum CheckAndFindCurrentAppVersionAOStatusEnum {
    IS_EXISTS = 'IS_EXISTS',
    NEED_UPDATE = 'NEED_UPDATE',
    PUBLISH = 'PUBLISH'
}

/**
 * 
 * @export
 * @interface CheckAndFindNewestAppVersionAO
 */
export interface CheckAndFindNewestAppVersionAO {
    /**
     * 設備平台
     * @type {string}
     * @memberof CheckAndFindNewestAppVersionAO
     */
    'platform': CheckAndFindNewestAppVersionAOPlatformEnum;
    /**
     * 版本訊息
     * @type {string}
     * @memberof CheckAndFindNewestAppVersionAO
     */
    'message': string;
    /**
     * 更新網址
     * @type {string}
     * @memberof CheckAndFindNewestAppVersionAO
     */
    'updateUrl': string;
    /**
     * APP 版本
     * @type {string}
     * @memberof CheckAndFindNewestAppVersionAO
     */
    'version': string;
    /**
     * APP 資源包版本
     * @type {string}
     * @memberof CheckAndFindNewestAppVersionAO
     */
    'assetBundleVersion': string;
    /**
     * 版本狀態, NEED_UPDATE 強制更新、PUBLISH 發布
     * @type {string}
     * @memberof CheckAndFindNewestAppVersionAO
     */
    'status': CheckAndFindNewestAppVersionAOStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CheckAndFindNewestAppVersionAOPlatformEnum {
    ANDROID = 'ANDROID',
    IOS = 'IOS'
}
/**
    * @export
    * @enum {string}
    */
export enum CheckAndFindNewestAppVersionAOStatusEnum {
    NEED_UPDATE = 'NEED_UPDATE',
    PUBLISH = 'PUBLISH'
}

/**
 * 
 * @export
 * @interface CheckAndFindSystemControllerAndAppVersionAO
 */
export interface CheckAndFindSystemControllerAndAppVersionAO {
    /**
     * 
     * @type {SystemControllerAO}
     * @memberof CheckAndFindSystemControllerAndAppVersionAO
     */
    'systemStatus': SystemControllerAO;
    /**
     * 
     * @type {CheckAndFindCurrentAppVersionAO}
     * @memberof CheckAndFindSystemControllerAndAppVersionAO
     */
    'currentAppVersion'?: CheckAndFindCurrentAppVersionAO;
    /**
     * 
     * @type {CheckAndFindNewestAppVersionAO}
     * @memberof CheckAndFindSystemControllerAndAppVersionAO
     */
    'newestAppVersion'?: CheckAndFindNewestAppVersionAO;
    /**
     * 
     * @type {AppAssetBundleVersionAO}
     * @memberof CheckAndFindSystemControllerAndAppVersionAO
     */
    'newestAppAssetBundleVersion'?: AppAssetBundleVersionAO;
}
/**
 * 
 * @export
 * @interface CheckAndFindSystemControllerAndAppVersionBodyDTO
 */
export interface CheckAndFindSystemControllerAndAppVersionBodyDTO {
    /**
     * 設備平台
     * @type {string}
     * @memberof CheckAndFindSystemControllerAndAppVersionBodyDTO
     */
    'platform': CheckAndFindSystemControllerAndAppVersionBodyDTOPlatformEnum;
    /**
     * APP 版本
     * @type {string}
     * @memberof CheckAndFindSystemControllerAndAppVersionBodyDTO
     */
    'version': string;
}

/**
    * @export
    * @enum {string}
    */
export enum CheckAndFindSystemControllerAndAppVersionBodyDTOPlatformEnum {
    ANDROID = 'ANDROID',
    IOS = 'IOS'
}

/**
 * 
 * @export
 * @interface CreateAppAssetBundleVersionBodyDTO
 */
export interface CreateAppAssetBundleVersionBodyDTO {
    /**
     * 設備平台
     * @type {string}
     * @memberof CreateAppAssetBundleVersionBodyDTO
     */
    'platform': CreateAppAssetBundleVersionBodyDTOPlatformEnum;
    /**
     * 版本訊息
     * @type {string}
     * @memberof CreateAppAssetBundleVersionBodyDTO
     */
    'message': string;
    /**
     * 版本
     * @type {string}
     * @memberof CreateAppAssetBundleVersionBodyDTO
     */
    'version': string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateAppAssetBundleVersionBodyDTOPlatformEnum {
    ANDROID = 'ANDROID',
    IOS = 'IOS'
}

/**
 * 
 * @export
 * @interface CreateAppVersionBodyDTO
 */
export interface CreateAppVersionBodyDTO {
    /**
     * 設備平台
     * @type {string}
     * @memberof CreateAppVersionBodyDTO
     */
    'platform': CreateAppVersionBodyDTOPlatformEnum;
    /**
     * 版本訊息
     * @type {string}
     * @memberof CreateAppVersionBodyDTO
     */
    'message': string;
    /**
     * 更新網址
     * @type {string}
     * @memberof CreateAppVersionBodyDTO
     */
    'updateUrl': string;
    /**
     * 版本狀態
     * @type {string}
     * @memberof CreateAppVersionBodyDTO
     */
    'status': CreateAppVersionBodyDTOStatusEnum;
    /**
     * APP 版本
     * @type {string}
     * @memberof CreateAppVersionBodyDTO
     */
    'version': string;
    /**
     * 資源版本
     * @type {string}
     * @memberof CreateAppVersionBodyDTO
     */
    'assetBundleVersion': string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateAppVersionBodyDTOPlatformEnum {
    ANDROID = 'ANDROID',
    IOS = 'IOS'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateAppVersionBodyDTOStatusEnum {
    DEVELOPING = 'DEVELOPING',
    IN_REVIEW = 'IN_REVIEW',
    IS_EXISTS = 'IS_EXISTS',
    NEED_UPDATE = 'NEED_UPDATE',
    PUBLISH = 'PUBLISH',
    DEPRECATED = 'DEPRECATED',
    MAINTAIN = 'MAINTAIN'
}

/**
 * 
 * @export
 * @interface CreateGameBonusActivityBodyDTO
 */
export interface CreateGameBonusActivityBodyDTO {
    /**
     * 開始時間
     * @type {string}
     * @memberof CreateGameBonusActivityBodyDTO
     */
    'startAt': string;
    /**
     * 結束時間
     * @type {string}
     * @memberof CreateGameBonusActivityBodyDTO
     */
    'endAt': string;
    /**
     * 排位積分加成比率 0.1 = 10%
     * @type {number}
     * @memberof CreateGameBonusActivityBodyDTO
     */
    'qualifyingPointRate': number;
    /**
     * 帳號加成比率 0.1 = 10%
     * @type {number}
     * @memberof CreateGameBonusActivityBodyDTO
     */
    'accountExperienceRate': number;
    /**
     * 遊戲區
     * @type {string}
     * @memberof CreateGameBonusActivityBodyDTO
     */
    'gameArea': CreateGameBonusActivityBodyDTOGameAreaEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateGameBonusActivityBodyDTOGameAreaEnum {
    EN = 'EN',
    QU = 'QU',
    EM = 'EM'
}

/**
 * 
 * @export
 * @interface ErrorDTO
 */
export interface ErrorDTO {
    /**
     * 
     * @type {string}
     * @memberof ErrorDTO
     */
    'errorCode': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorDTO
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof ErrorDTO
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof ErrorDTO
     */
    'serviceName': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorDTO
     */
    'traceId': string;
}
/**
 * 
 * @export
 * @interface FindAdminSyncGameGameAO
 */
export interface FindAdminSyncGameGameAO {
    /**
     * 
     * @type {string}
     * @memberof FindAdminSyncGameGameAO
     */
    'id': string;
    /**
     * 
     * @type {Array<object>}
     * @memberof FindAdminSyncGameGameAO
     */
    'gamers': Array<object>;
}
/**
 * 
 * @export
 * @interface FindAdminSyncMatchmakingGamerAO
 */
export interface FindAdminSyncMatchmakingGamerAO {
    /**
     * 
     * @type {number}
     * @memberof FindAdminSyncMatchmakingGamerAO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof FindAdminSyncMatchmakingGamerAO
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof FindAdminSyncMatchmakingGamerAO
     */
    'sourceRangeMin'?: number;
    /**
     * 
     * @type {number}
     * @memberof FindAdminSyncMatchmakingGamerAO
     */
    'sourceRangeMax'?: number;
    /**
     * 
     * @type {number}
     * @memberof FindAdminSyncMatchmakingGamerAO
     */
    'totalPoint'?: number;
    /**
     * 
     * @type {number}
     * @memberof FindAdminSyncMatchmakingGamerAO
     */
    'timeAt': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof FindAdminSyncMatchmakingGamerAO
     */
    'previousGamerIds': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof FindAdminSyncMatchmakingGamerAO
     */
    'status': FindAdminSyncMatchmakingGamerAOStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FindAdminSyncMatchmakingGamerAOStatusEnum {
    MATCHING = 'MATCHING',
    WAITING = 'WAITING',
    LOADING = 'LOADING'
}

/**
 * 
 * @export
 * @interface FindAllStageAO
 */
export interface FindAllStageAO {
    /**
     * 
     * @type {Array<AdminGetStageAO>}
     * @memberof FindAllStageAO
     */
    'stages': Array<AdminGetStageAO>;
    /**
     * 
     * @type {number}
     * @memberof FindAllStageAO
     */
    'playingGameTotalCount': number;
    /**
     * 
     * @type {number}
     * @memberof FindAllStageAO
     */
    'matchmakingTotalCount': number;
    /**
     * 
     * @type {number}
     * @memberof FindAllStageAO
     */
    'totalCount': number;
    /**
     * 
     * @type {PaginationAO}
     * @memberof FindAllStageAO
     */
    'pagination': PaginationAO;
}
/**
 * 
 * @export
 * @interface FindAppVersionsAO
 */
export interface FindAppVersionsAO {
    /**
     * 
     * @type {Array<AppVersionAO>}
     * @memberof FindAppVersionsAO
     */
    'items': Array<AppVersionAO>;
    /**
     * 
     * @type {PaginationAO}
     * @memberof FindAppVersionsAO
     */
    'pagination': PaginationAO;
}
/**
 * 
 * @export
 * @interface FindAssetBundleVersionsAO
 */
export interface FindAssetBundleVersionsAO {
    /**
     * 
     * @type {Array<AppAssetBundleVersionAO>}
     * @memberof FindAssetBundleVersionsAO
     */
    'items': Array<AppAssetBundleVersionAO>;
    /**
     * 
     * @type {PaginationAO}
     * @memberof FindAssetBundleVersionsAO
     */
    'pagination': PaginationAO;
}
/**
 * 
 * @export
 * @interface FindGameBonusActivitiesAO
 */
export interface FindGameBonusActivitiesAO {
    /**
     * 
     * @type {Array<GameBonusActivityAO>}
     * @memberof FindGameBonusActivitiesAO
     */
    'items': Array<GameBonusActivityAO>;
    /**
     * 
     * @type {PaginationAO}
     * @memberof FindGameBonusActivitiesAO
     */
    'pagination': PaginationAO;
}
/**
 * 
 * @export
 * @interface FindOneOngoingGameBonusActivityBodyDTO
 */
export interface FindOneOngoingGameBonusActivityBodyDTO {
    /**
     * 遊戲區
     * @type {string}
     * @memberof FindOneOngoingGameBonusActivityBodyDTO
     */
    'gameArea': FindOneOngoingGameBonusActivityBodyDTOGameAreaEnum;
    /**
     * 指定時間
     * @type {string}
     * @memberof FindOneOngoingGameBonusActivityBodyDTO
     */
    'currentTime'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FindOneOngoingGameBonusActivityBodyDTOGameAreaEnum {
    EN = 'EN',
    QU = 'QU',
    EM = 'EM'
}

/**
 * 
 * @export
 * @interface GameBonusActivityAO
 */
export interface GameBonusActivityAO {
    /**
     * id
     * @type {number}
     * @memberof GameBonusActivityAO
     */
    'id': number;
    /**
     * 開始時間
     * @type {string}
     * @memberof GameBonusActivityAO
     */
    'startAt': string;
    /**
     * 結束時間
     * @type {string}
     * @memberof GameBonusActivityAO
     */
    'endAt': string;
    /**
     * 排位積分加成比率 0.1 = 10%
     * @type {number}
     * @memberof GameBonusActivityAO
     */
    'qualifyingPointRate': number;
    /**
     * 帳號加成比率 0.1 = 10%
     * @type {number}
     * @memberof GameBonusActivityAO
     */
    'accountExperienceRate': number;
    /**
     * 遊戲區
     * @type {string}
     * @memberof GameBonusActivityAO
     */
    'gameArea': GameBonusActivityAOGameAreaEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum GameBonusActivityAOGameAreaEnum {
    EN = 'EN',
    QU = 'QU',
    EM = 'EM'
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof InlineResponse200
     */
    'info'?: { [key: string]: { [key: string]: string; }; } | null;
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof InlineResponse200
     */
    'error'?: { [key: string]: { [key: string]: string; }; } | null;
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof InlineResponse200
     */
    'details'?: { [key: string]: { [key: string]: string; }; };
}
/**
 * 
 * @export
 * @interface InlineResponse503
 */
export interface InlineResponse503 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse503
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof InlineResponse503
     */
    'info'?: { [key: string]: { [key: string]: string; }; } | null;
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof InlineResponse503
     */
    'error'?: { [key: string]: { [key: string]: string; }; } | null;
    /**
     * 
     * @type {{ [key: string]: { [key: string]: string; }; }}
     * @memberof InlineResponse503
     */
    'details'?: { [key: string]: { [key: string]: string; }; };
}
/**
 * 
 * @export
 * @interface MatchmakingConfigAO
 */
export interface MatchmakingConfigAO {
    /**
     * 
     * @type {number}
     * @memberof MatchmakingConfigAO
     */
    'qualifyingNotFetchAddAllowRangeTotalPoint': number;
    /**
     * 
     * @type {number}
     * @memberof MatchmakingConfigAO
     */
    'qualifyingNotFetchUpdateAllowRangeSecond': number;
    /**
     * 
     * @type {number}
     * @memberof MatchmakingConfigAO
     */
    'qualifyingNotFetchUpdateAllowStartRangeTotalPoint': number;
    /**
     * 
     * @type {boolean}
     * @memberof MatchmakingConfigAO
     */
    'qualifyingNotFetchAllowRangeIsEnable': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MatchmakingConfigAO
     */
    'qualifyingMatchmakingRuleIsEnable': boolean;
    /**
     * 
     * @type {number}
     * @memberof MatchmakingConfigAO
     */
    'testHasPreviousGamerSecond': number;
}
/**
 * 
 * @export
 * @interface PaginationAO
 */
export interface PaginationAO {
    /**
     * 
     * @type {number}
     * @memberof PaginationAO
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationAO
     */
    'limit': number;
    /**
     * 
     * @type {number}
     * @memberof PaginationAO
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface RegistrationGroupedRecordAO
 */
export interface RegistrationGroupedRecordAO {
    /**
     * 
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'timeInterval': number;
    /**
     * 註冊用戶數
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'userCountSum': number;
    /**
     * Apple 註冊用戶數
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'appleCountSum': number;
    /**
     * Facebook 註冊用戶數
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'facebookCountSum': number;
    /**
     * Google 註冊用戶數
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'googleCountSum': number;
    /**
     * Line 註冊用戶數
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'lineCountSum': number;
    /**
     * Guest 註冊用戶數
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'guestCountSum': number;
    /**
     * Guest 綁定 Apple 用戶數
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'appleBoundCountSum': number;
    /**
     * Guest 綁定 Facebook 用戶數
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'facebookBoundCountSum': number;
    /**
     * Guest 綁定 Google 用戶數
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'googleBoundCountSum': number;
    /**
     * Guest 綁定 Line 用戶數
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'lineBoundCountSum': number;
    /**
     * 創角色用戶數
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'accountCreatedCountSum': number;
    /**
     * 電話認證完成用戶數
     * @type {number}
     * @memberof RegistrationGroupedRecordAO
     */
    'phoneVerifiedCountSum': number;
}
/**
 * 
 * @export
 * @interface StageAO
 */
export interface StageAO {
    /**
     * 
     * @type {number}
     * @memberof StageAO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof StageAO
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof StageAO
     */
    'order': number;
    /**
     * 
     * @type {number}
     * @memberof StageAO
     */
    'gameTotalBankerRotateRound': number;
    /**
     * 
     * @type {number}
     * @memberof StageAO
     */
    'gameBaseBet': number;
    /**
     * 
     * @type {number}
     * @memberof StageAO
     */
    'gameBonus': number;
    /**
     * 
     * @type {number}
     * @memberof StageAO
     */
    'playerCount': number;
    /**
     * 
     * @type {string}
     * @memberof StageAO
     */
    'gameCurrency': StageAOGameCurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof StageAO
     */
    'image': string;
    /**
     * 
     * @type {number}
     * @memberof StageAO
     */
    'gameSecond': number;
    /**
     * 
     * @type {number}
     * @memberof StageAO
     */
    'roundSystemFeeRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof StageAO
     */
    'pointWeighted'?: number;
    /**
     * 
     * @type {number}
     * @memberof StageAO
     */
    'circleFee'?: number;
    /**
     * 
     * @type {string}
     * @memberof StageAO
     */
    'circleFeeCurrency'?: StageAOCircleFeeCurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof StageAO
     */
    'label'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum StageAOGameCurrencyEnum {
    SILVER_COIN = 'SILVER_COIN',
    GOLD_COIN = 'GOLD_COIN',
    CRYSTAL_DIAMOND = 'CRYSTAL_DIAMOND'
}
/**
    * @export
    * @enum {string}
    */
export enum StageAOCircleFeeCurrencyEnum {
    SILVER_COIN = 'SILVER_COIN',
    GOLD_COIN = 'GOLD_COIN',
    CRYSTAL_DIAMOND = 'CRYSTAL_DIAMOND'
}

/**
 * 
 * @export
 * @interface SystemControllerAO
 */
export interface SystemControllerAO {
    /**
     * 系統服務關閉訊息
     * @type {string}
     * @memberof SystemControllerAO
     */
    'systemServiceCloseMessage': string;
    /**
     * 系統服務是否關閉
     * @type {boolean}
     * @memberof SystemControllerAO
     */
    'isSystemServiceClose': boolean;
    /**
     * 維護公告網址
     * @type {string}
     * @memberof SystemControllerAO
     */
    'announcementUrl': string;
}
/**
 * 
 * @export
 * @interface UpdateAppBundleVersionBodyDTO
 */
export interface UpdateAppBundleVersionBodyDTO {
    /**
     * 版本訊息
     * @type {string}
     * @memberof UpdateAppBundleVersionBodyDTO
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface UpdateAppVersionBodyDTO
 */
export interface UpdateAppVersionBodyDTO {
    /**
     * 版本訊息
     * @type {string}
     * @memberof UpdateAppVersionBodyDTO
     */
    'message'?: string;
    /**
     * 更新網址
     * @type {string}
     * @memberof UpdateAppVersionBodyDTO
     */
    'updateUrl'?: string;
    /**
     * 版本狀態
     * @type {string}
     * @memberof UpdateAppVersionBodyDTO
     */
    'status'?: UpdateAppVersionBodyDTOStatusEnum;
    /**
     * APP 資源包版本
     * @type {string}
     * @memberof UpdateAppVersionBodyDTO
     */
    'assetBundleVersion'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateAppVersionBodyDTOStatusEnum {
    DEVELOPING = 'DEVELOPING',
    IN_REVIEW = 'IN_REVIEW',
    IS_EXISTS = 'IS_EXISTS',
    NEED_UPDATE = 'NEED_UPDATE',
    PUBLISH = 'PUBLISH',
    DEPRECATED = 'DEPRECATED',
    MAINTAIN = 'MAINTAIN'
}

/**
 * 
 * @export
 * @interface UpdateGameBonusActivityBodyDTO
 */
export interface UpdateGameBonusActivityBodyDTO {
    /**
     * 開始時間
     * @type {string}
     * @memberof UpdateGameBonusActivityBodyDTO
     */
    'startAt'?: string;
    /**
     * 結束時間
     * @type {string}
     * @memberof UpdateGameBonusActivityBodyDTO
     */
    'endAt'?: string;
    /**
     * 排位積分加成比率 0.1 = 10%
     * @type {number}
     * @memberof UpdateGameBonusActivityBodyDTO
     */
    'qualifyingPointRate'?: number;
    /**
     * 帳號加成比率 0.1 = 10%
     * @type {number}
     * @memberof UpdateGameBonusActivityBodyDTO
     */
    'accountExperienceRate'?: number;
    /**
     * 遊戲區
     * @type {string}
     * @memberof UpdateGameBonusActivityBodyDTO
     */
    'gameArea'?: UpdateGameBonusActivityBodyDTOGameAreaEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateGameBonusActivityBodyDTOGameAreaEnum {
    EN = 'EN',
    QU = 'QU',
    EM = 'EM'
}

/**
 * 
 * @export
 * @interface UpdateSystemControllerBodyDTO
 */
export interface UpdateSystemControllerBodyDTO {
    /**
     * 系統服務關閉訊息
     * @type {string}
     * @memberof UpdateSystemControllerBodyDTO
     */
    'systemServiceCloseMessage': string;
    /**
     * 系統服務是否關閉
     * @type {boolean}
     * @memberof UpdateSystemControllerBodyDTO
     */
    'isSystemServiceClose'?: boolean;
    /**
     * 維護公告網址
     * @type {string}
     * @memberof UpdateSystemControllerBodyDTO
     */
    'announcementUrl'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheck(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1AccountApi - axios parameter creator
 * @export
 */
export const V1AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 獲取用戶資料
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminAccountInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1AccountApi - functional programming interface
 * @export
 */
export const V1AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 獲取用戶資料
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminAccountInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminAccountInfoAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdminAccountInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1AccountApi - factory interface
 * @export
 */
export const V1AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1AccountApiFp(configuration)
    return {
        /**
         * 
         * @summary 獲取用戶資料
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminAccountInfo(options?: any): AxiosPromise<AdminAccountInfoAO> {
            return localVarFp.getAdminAccountInfo(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1AccountApi - object-oriented interface
 * @export
 * @class V1AccountApi
 * @extends {BaseAPI}
 */
export class V1AccountApi extends BaseAPI {
    /**
     * 
     * @summary 獲取用戶資料
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AccountApi
     */
    public getAdminAccountInfo(options?: AxiosRequestConfig) {
        return V1AccountApiFp(this.configuration).getAdminAccountInfo(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1AuthApi - axios parameter creator
 * @export
 */
export const V1AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AdminLoginCodeDTO} AdminLoginCodeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLoginByGoogle: async (AdminLoginCodeDTO: AdminLoginCodeDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'AdminLoginCodeDTO' is not null or undefined
            assertParamExists('adminLoginByGoogle', 'AdminLoginCodeDTO', AdminLoginCodeDTO)
            const localVarPath = `/v1/auth/login/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(AdminLoginCodeDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AdminLogoutDTO} AdminLogoutDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLogout: async (AdminLogoutDTO: AdminLogoutDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'AdminLogoutDTO' is not null or undefined
            assertParamExists('adminLogout', 'AdminLogoutDTO', AdminLogoutDTO)
            const localVarPath = `/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(AdminLogoutDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AdminLoginTokenDTO} AdminLoginTokenDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRefresh: async (AdminLoginTokenDTO: AdminLoginTokenDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'AdminLoginTokenDTO' is not null or undefined
            assertParamExists('adminRefresh', 'AdminLoginTokenDTO', AdminLoginTokenDTO)
            const localVarPath = `/v1/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(AdminLoginTokenDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'ASC' | 'DESC'} [orderBy] 
         * @param {'userCount' | 'appleCount' | 'facebookCount' | 'googleCount' | 'lineCount' | 'guestCount' | 'appleBoundCount' | 'facebookBoundCount' | 'googleBoundCount' | 'lineBoundCount' | 'accountCreatedCount' | 'phoneVerifiedCount'} [sortBy] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {number} [startAt] 
         * @param {number} [endAt] 
         * @param {'hour' | 'day' | 'month' | 'year'} [groupBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistrationRecords: async (orderBy?: 'ASC' | 'DESC', sortBy?: 'userCount' | 'appleCount' | 'facebookCount' | 'googleCount' | 'lineCount' | 'guestCount' | 'appleBoundCount' | 'facebookBoundCount' | 'googleBoundCount' | 'lineBoundCount' | 'accountCreatedCount' | 'phoneVerifiedCount', limit?: number, offset?: number, startAt?: number, endAt?: number, groupBy?: 'hour' | 'day' | 'month' | 'year', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/registration-records`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (startAt !== undefined) {
                localVarQueryParameter['startAt'] = startAt;
            }

            if (endAt !== undefined) {
                localVarQueryParameter['endAt'] = endAt;
            }

            if (groupBy !== undefined) {
                localVarQueryParameter['groupBy'] = groupBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1AuthApi - functional programming interface
 * @export
 */
export const V1AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AdminLoginCodeDTO} AdminLoginCodeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminLoginByGoogle(AdminLoginCodeDTO: AdminLoginCodeDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAOImp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminLoginByGoogle(AdminLoginCodeDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AdminLogoutDTO} AdminLogoutDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminLogout(AdminLogoutDTO: AdminLogoutDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminLogout(AdminLogoutDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AdminLoginTokenDTO} AdminLoginTokenDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminRefresh(AdminLoginTokenDTO: AdminLoginTokenDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAOImp>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminRefresh(AdminLoginTokenDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'ASC' | 'DESC'} [orderBy] 
         * @param {'userCount' | 'appleCount' | 'facebookCount' | 'googleCount' | 'lineCount' | 'guestCount' | 'appleBoundCount' | 'facebookBoundCount' | 'googleBoundCount' | 'lineBoundCount' | 'accountCreatedCount' | 'phoneVerifiedCount'} [sortBy] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {number} [startAt] 
         * @param {number} [endAt] 
         * @param {'hour' | 'day' | 'month' | 'year'} [groupBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegistrationRecords(orderBy?: 'ASC' | 'DESC', sortBy?: 'userCount' | 'appleCount' | 'facebookCount' | 'googleCount' | 'lineCount' | 'guestCount' | 'appleBoundCount' | 'facebookBoundCount' | 'googleBoundCount' | 'lineBoundCount' | 'accountCreatedCount' | 'phoneVerifiedCount', limit?: number, offset?: number, startAt?: number, endAt?: number, groupBy?: 'hour' | 'day' | 'month' | 'year', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationGroupedRecordAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegistrationRecords(orderBy, sortBy, limit, offset, startAt, endAt, groupBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1AuthApi - factory interface
 * @export
 */
export const V1AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {AdminLoginCodeDTO} AdminLoginCodeDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLoginByGoogle(AdminLoginCodeDTO: AdminLoginCodeDTO, options?: any): AxiosPromise<AuthAOImp> {
            return localVarFp.adminLoginByGoogle(AdminLoginCodeDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminLogoutDTO} AdminLogoutDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLogout(AdminLogoutDTO: AdminLogoutDTO, options?: any): AxiosPromise<void> {
            return localVarFp.adminLogout(AdminLogoutDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AdminLoginTokenDTO} AdminLoginTokenDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRefresh(AdminLoginTokenDTO: AdminLoginTokenDTO, options?: any): AxiosPromise<AuthAOImp> {
            return localVarFp.adminRefresh(AdminLoginTokenDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'ASC' | 'DESC'} [orderBy] 
         * @param {'userCount' | 'appleCount' | 'facebookCount' | 'googleCount' | 'lineCount' | 'guestCount' | 'appleBoundCount' | 'facebookBoundCount' | 'googleBoundCount' | 'lineBoundCount' | 'accountCreatedCount' | 'phoneVerifiedCount'} [sortBy] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {number} [startAt] 
         * @param {number} [endAt] 
         * @param {'hour' | 'day' | 'month' | 'year'} [groupBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistrationRecords(orderBy?: 'ASC' | 'DESC', sortBy?: 'userCount' | 'appleCount' | 'facebookCount' | 'googleCount' | 'lineCount' | 'guestCount' | 'appleBoundCount' | 'facebookBoundCount' | 'googleBoundCount' | 'lineBoundCount' | 'accountCreatedCount' | 'phoneVerifiedCount', limit?: number, offset?: number, startAt?: number, endAt?: number, groupBy?: 'hour' | 'day' | 'month' | 'year', options?: any): AxiosPromise<RegistrationGroupedRecordAO> {
            return localVarFp.getRegistrationRecords(orderBy, sortBy, limit, offset, startAt, endAt, groupBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1AuthApi - object-oriented interface
 * @export
 * @class V1AuthApi
 * @extends {BaseAPI}
 */
export class V1AuthApi extends BaseAPI {
    /**
     * 
     * @param {AdminLoginCodeDTO} AdminLoginCodeDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AuthApi
     */
    public adminLoginByGoogle(AdminLoginCodeDTO: AdminLoginCodeDTO, options?: AxiosRequestConfig) {
        return V1AuthApiFp(this.configuration).adminLoginByGoogle(AdminLoginCodeDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminLogoutDTO} AdminLogoutDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AuthApi
     */
    public adminLogout(AdminLogoutDTO: AdminLogoutDTO, options?: AxiosRequestConfig) {
        return V1AuthApiFp(this.configuration).adminLogout(AdminLogoutDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AdminLoginTokenDTO} AdminLoginTokenDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AuthApi
     */
    public adminRefresh(AdminLoginTokenDTO: AdminLoginTokenDTO, options?: AxiosRequestConfig) {
        return V1AuthApiFp(this.configuration).adminRefresh(AdminLoginTokenDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {'ASC' | 'DESC'} [orderBy] 
     * @param {'userCount' | 'appleCount' | 'facebookCount' | 'googleCount' | 'lineCount' | 'guestCount' | 'appleBoundCount' | 'facebookBoundCount' | 'googleBoundCount' | 'lineBoundCount' | 'accountCreatedCount' | 'phoneVerifiedCount'} [sortBy] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {number} [startAt] 
     * @param {number} [endAt] 
     * @param {'hour' | 'day' | 'month' | 'year'} [groupBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1AuthApi
     */
    public getRegistrationRecords(orderBy?: 'ASC' | 'DESC', sortBy?: 'userCount' | 'appleCount' | 'facebookCount' | 'googleCount' | 'lineCount' | 'guestCount' | 'appleBoundCount' | 'facebookBoundCount' | 'googleBoundCount' | 'lineBoundCount' | 'accountCreatedCount' | 'phoneVerifiedCount', limit?: number, offset?: number, startAt?: number, endAt?: number, groupBy?: 'hour' | 'day' | 'month' | 'year', options?: AxiosRequestConfig) {
        return V1AuthApiFp(this.configuration).getRegistrationRecords(orderBy, sortBy, limit, offset, startAt, endAt, groupBy, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1MatchmakingApi - axios parameter creator
 * @export
 */
export const V1MatchmakingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得配對場次同步
         * @param {'MAHJONG_ENTERTAINMENT' | 'MAHJONG_QUALIFYING'} gameArea 遊戲區
         * @param {number} stage 遊戲區下的場次id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAdminSyncMatchmaking: async (gameArea: 'MAHJONG_ENTERTAINMENT' | 'MAHJONG_QUALIFYING', stage: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameArea' is not null or undefined
            assertParamExists('findAdminSyncMatchmaking', 'gameArea', gameArea)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('findAdminSyncMatchmaking', 'stage', stage)
            const localVarPath = `/v1/matchmaking/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gameArea !== undefined) {
                localVarQueryParameter['gameArea'] = gameArea;
            }

            if (stage !== undefined) {
                localVarQueryParameter['stage'] = stage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得所有配對場次同步
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllMatchmakingStage: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/matchmaking/all-stage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1MatchmakingApi - functional programming interface
 * @export
 */
export const V1MatchmakingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1MatchmakingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得配對場次同步
         * @param {'MAHJONG_ENTERTAINMENT' | 'MAHJONG_QUALIFYING'} gameArea 遊戲區
         * @param {number} stage 遊戲區下的場次id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAdminSyncMatchmaking(gameArea: 'MAHJONG_ENTERTAINMENT' | 'MAHJONG_QUALIFYING', stage: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminPayloadAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAdminSyncMatchmaking(gameArea, stage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得所有配對場次同步
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllMatchmakingStage(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindAllStageAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllMatchmakingStage(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1MatchmakingApi - factory interface
 * @export
 */
export const V1MatchmakingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1MatchmakingApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得配對場次同步
         * @param {'MAHJONG_ENTERTAINMENT' | 'MAHJONG_QUALIFYING'} gameArea 遊戲區
         * @param {number} stage 遊戲區下的場次id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAdminSyncMatchmaking(gameArea: 'MAHJONG_ENTERTAINMENT' | 'MAHJONG_QUALIFYING', stage: number, options?: any): AxiosPromise<AdminPayloadAO> {
            return localVarFp.findAdminSyncMatchmaking(gameArea, stage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得所有配對場次同步
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllMatchmakingStage(limit?: number, offset?: number, options?: any): AxiosPromise<FindAllStageAO> {
            return localVarFp.findAllMatchmakingStage(limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1MatchmakingApi - object-oriented interface
 * @export
 * @class V1MatchmakingApi
 * @extends {BaseAPI}
 */
export class V1MatchmakingApi extends BaseAPI {
    /**
     * 
     * @summary 取得配對場次同步
     * @param {'MAHJONG_ENTERTAINMENT' | 'MAHJONG_QUALIFYING'} gameArea 遊戲區
     * @param {number} stage 遊戲區下的場次id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1MatchmakingApi
     */
    public findAdminSyncMatchmaking(gameArea: 'MAHJONG_ENTERTAINMENT' | 'MAHJONG_QUALIFYING', stage: number, options?: AxiosRequestConfig) {
        return V1MatchmakingApiFp(this.configuration).findAdminSyncMatchmaking(gameArea, stage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得所有配對場次同步
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1MatchmakingApi
     */
    public findAllMatchmakingStage(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return V1MatchmakingApiFp(this.configuration).findAllMatchmakingStage(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1SystemsApi - axios parameter creator
 * @export
 */
export const V1SystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * currentAppVersion: 目前版本，無值表示無此版本資訊newestAppVersion: 需要更新的 APP 版本，無值表示無更新版本．newestAppAssetBundleVersion: 目前 APP 版本最新的資源包版本，無值表示沒有資源包版本
         * @summary 檢查及取得系統狀態及APP 版本
         * @param {CheckAndFindSystemControllerAndAppVersionBodyDTO} CheckAndFindSystemControllerAndAppVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAndFindSystemControllerAndAppVersion: async (CheckAndFindSystemControllerAndAppVersionBodyDTO: CheckAndFindSystemControllerAndAppVersionBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CheckAndFindSystemControllerAndAppVersionBodyDTO' is not null or undefined
            assertParamExists('checkAndFindSystemControllerAndAppVersion', 'CheckAndFindSystemControllerAndAppVersionBodyDTO', CheckAndFindSystemControllerAndAppVersionBodyDTO)
            const localVarPath = `/v1/systems/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CheckAndFindSystemControllerAndAppVersionBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增 APP 資源包版本
         * @param {CreateAppAssetBundleVersionBodyDTO} CreateAppAssetBundleVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppAssetBundleVersion: async (CreateAppAssetBundleVersionBodyDTO: CreateAppAssetBundleVersionBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CreateAppAssetBundleVersionBodyDTO' is not null or undefined
            assertParamExists('createAppAssetBundleVersion', 'CreateAppAssetBundleVersionBodyDTO', CreateAppAssetBundleVersionBodyDTO)
            const localVarPath = `/v1/systems/app-asset-bundle-versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CreateAppAssetBundleVersionBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增 APP 版本
         * @param {CreateAppVersionBodyDTO} CreateAppVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppVersion: async (CreateAppVersionBodyDTO: CreateAppVersionBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CreateAppVersionBodyDTO' is not null or undefined
            assertParamExists('createAppVersion', 'CreateAppVersionBodyDTO', CreateAppVersionBodyDTO)
            const localVarPath = `/v1/systems/app-versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CreateAppVersionBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增遊戲加成活動
         * @param {CreateGameBonusActivityBodyDTO} CreateGameBonusActivityBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGameBonusActivity: async (CreateGameBonusActivityBodyDTO: CreateGameBonusActivityBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CreateGameBonusActivityBodyDTO' is not null or undefined
            assertParamExists('createGameBonusActivity', 'CreateGameBonusActivityBodyDTO', CreateGameBonusActivityBodyDTO)
            const localVarPath = `/v1/systems/game-bonus-activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CreateGameBonusActivityBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除 APP 資源包版本
         * @param {'ANDROID' | 'IOS'} platform 設備平台
         * @param {string} version 版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppAssetBundleVersion: async (platform: 'ANDROID' | 'IOS', version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('deleteAppAssetBundleVersion', 'platform', platform)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('deleteAppAssetBundleVersion', 'version', version)
            const localVarPath = `/v1/systems/app-asset-bundle-versions/platforms/{platform}/versions/{version}`
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除 APP 版本
         * @param {'ANDROID' | 'IOS'} platform 設備平台
         * @param {string} version 版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppVersion: async (platform: 'ANDROID' | 'IOS', version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('deleteAppVersion', 'platform', platform)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('deleteAppVersion', 'version', version)
            const localVarPath = `/v1/systems/app-versions/platforms/{platform}/versions/{version}`
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除遊戲加成活動
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGameBonusActivity: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGameBonusActivity', 'id', id)
            const localVarPath = `/v1/systems/game-bonus-activity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 APP 資源包版本列表
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {'ANDROID' | 'IOS'} [platform] 設備平台
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAppAssetBundleVersions: async (limit?: number, offset?: number, platform?: 'ANDROID' | 'IOS', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/systems/app-asset-bundle-versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得APP 版本列表
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAppVersions: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/systems/app-versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得遊戲加成活動列表
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findGameBonusActivities: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/systems/game-bonus-activity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得進行中的遊戲加成活動
         * @param {FindOneOngoingGameBonusActivityBodyDTO} FindOneOngoingGameBonusActivityBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneOngoingGameBonusActivity: async (FindOneOngoingGameBonusActivityBodyDTO: FindOneOngoingGameBonusActivityBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'FindOneOngoingGameBonusActivityBodyDTO' is not null or undefined
            assertParamExists('findOneOngoingGameBonusActivity', 'FindOneOngoingGameBonusActivityBodyDTO', FindOneOngoingGameBonusActivityBodyDTO)
            const localVarPath = `/v1/systems/game-bonus-activity/ongoing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(FindOneOngoingGameBonusActivityBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得系統狀態
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSystemController: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/systems/controller`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改 APP 資源包版本
         * @param {'ANDROID' | 'IOS'} platform 設備平台
         * @param {string} version 版本
         * @param {UpdateAppBundleVersionBodyDTO} UpdateAppBundleVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppAssetBundleVersion: async (platform: 'ANDROID' | 'IOS', version: string, UpdateAppBundleVersionBodyDTO: UpdateAppBundleVersionBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('updateAppAssetBundleVersion', 'platform', platform)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('updateAppAssetBundleVersion', 'version', version)
            // verify required parameter 'UpdateAppBundleVersionBodyDTO' is not null or undefined
            assertParamExists('updateAppAssetBundleVersion', 'UpdateAppBundleVersionBodyDTO', UpdateAppBundleVersionBodyDTO)
            const localVarPath = `/v1/systems/app-asset-bundle-versions/platforms/{platform}/versions/{version}`
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateAppBundleVersionBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改 APP 版本
         * @param {'ANDROID' | 'IOS'} platform 設備平台
         * @param {string} version 版本
         * @param {UpdateAppVersionBodyDTO} UpdateAppVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppVersion: async (platform: 'ANDROID' | 'IOS', version: string, UpdateAppVersionBodyDTO: UpdateAppVersionBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('updateAppVersion', 'platform', platform)
            // verify required parameter 'version' is not null or undefined
            assertParamExists('updateAppVersion', 'version', version)
            // verify required parameter 'UpdateAppVersionBodyDTO' is not null or undefined
            assertParamExists('updateAppVersion', 'UpdateAppVersionBodyDTO', UpdateAppVersionBodyDTO)
            const localVarPath = `/v1/systems/app-versions/platforms/{platform}/versions/{version}`
                .replace(`{${"platform"}}`, encodeURIComponent(String(platform)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateAppVersionBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改遊戲加成活動
         * @param {number} id 
         * @param {UpdateGameBonusActivityBodyDTO} UpdateGameBonusActivityBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGameBonusActivity: async (id: number, UpdateGameBonusActivityBodyDTO: UpdateGameBonusActivityBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGameBonusActivity', 'id', id)
            // verify required parameter 'UpdateGameBonusActivityBodyDTO' is not null or undefined
            assertParamExists('updateGameBonusActivity', 'UpdateGameBonusActivityBodyDTO', UpdateGameBonusActivityBodyDTO)
            const localVarPath = `/v1/systems/game-bonus-activity/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateGameBonusActivityBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新系統狀態
         * @param {UpdateSystemControllerBodyDTO} UpdateSystemControllerBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSystemController: async (UpdateSystemControllerBodyDTO: UpdateSystemControllerBodyDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'UpdateSystemControllerBodyDTO' is not null or undefined
            assertParamExists('updateSystemController', 'UpdateSystemControllerBodyDTO', UpdateSystemControllerBodyDTO)
            const localVarPath = `/v1/systems/controller`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(UpdateSystemControllerBodyDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1SystemsApi - functional programming interface
 * @export
 */
export const V1SystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1SystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * currentAppVersion: 目前版本，無值表示無此版本資訊newestAppVersion: 需要更新的 APP 版本，無值表示無更新版本．newestAppAssetBundleVersion: 目前 APP 版本最新的資源包版本，無值表示沒有資源包版本
         * @summary 檢查及取得系統狀態及APP 版本
         * @param {CheckAndFindSystemControllerAndAppVersionBodyDTO} CheckAndFindSystemControllerAndAppVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkAndFindSystemControllerAndAppVersion(CheckAndFindSystemControllerAndAppVersionBodyDTO: CheckAndFindSystemControllerAndAppVersionBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckAndFindSystemControllerAndAppVersionAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkAndFindSystemControllerAndAppVersion(CheckAndFindSystemControllerAndAppVersionBodyDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增 APP 資源包版本
         * @param {CreateAppAssetBundleVersionBodyDTO} CreateAppAssetBundleVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppAssetBundleVersion(CreateAppAssetBundleVersionBodyDTO: CreateAppAssetBundleVersionBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppAssetBundleVersion(CreateAppAssetBundleVersionBodyDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增 APP 版本
         * @param {CreateAppVersionBodyDTO} CreateAppVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAppVersion(CreateAppVersionBodyDTO: CreateAppVersionBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAppVersion(CreateAppVersionBodyDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增遊戲加成活動
         * @param {CreateGameBonusActivityBodyDTO} CreateGameBonusActivityBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGameBonusActivity(CreateGameBonusActivityBodyDTO: CreateGameBonusActivityBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGameBonusActivity(CreateGameBonusActivityBodyDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除 APP 資源包版本
         * @param {'ANDROID' | 'IOS'} platform 設備平台
         * @param {string} version 版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppAssetBundleVersion(platform: 'ANDROID' | 'IOS', version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAppAssetBundleVersion(platform, version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除 APP 版本
         * @param {'ANDROID' | 'IOS'} platform 設備平台
         * @param {string} version 版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAppVersion(platform: 'ANDROID' | 'IOS', version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAppVersion(platform, version, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除遊戲加成活動
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGameBonusActivity(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGameBonusActivity(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 APP 資源包版本列表
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {'ANDROID' | 'IOS'} [platform] 設備平台
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAppAssetBundleVersions(limit?: number, offset?: number, platform?: 'ANDROID' | 'IOS', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindAssetBundleVersionsAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAppAssetBundleVersions(limit, offset, platform, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得APP 版本列表
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAppVersions(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindAppVersionsAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAppVersions(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得遊戲加成活動列表
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findGameBonusActivities(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindGameBonusActivitiesAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findGameBonusActivities(limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得進行中的遊戲加成活動
         * @param {FindOneOngoingGameBonusActivityBodyDTO} FindOneOngoingGameBonusActivityBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOneOngoingGameBonusActivity(FindOneOngoingGameBonusActivityBodyDTO: FindOneOngoingGameBonusActivityBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameBonusActivityAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOneOngoingGameBonusActivity(FindOneOngoingGameBonusActivityBodyDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得系統狀態
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSystemController(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemControllerAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSystemController(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 修改 APP 資源包版本
         * @param {'ANDROID' | 'IOS'} platform 設備平台
         * @param {string} version 版本
         * @param {UpdateAppBundleVersionBodyDTO} UpdateAppBundleVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAppAssetBundleVersion(platform: 'ANDROID' | 'IOS', version: string, UpdateAppBundleVersionBodyDTO: UpdateAppBundleVersionBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAppAssetBundleVersion(platform, version, UpdateAppBundleVersionBodyDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 修改 APP 版本
         * @param {'ANDROID' | 'IOS'} platform 設備平台
         * @param {string} version 版本
         * @param {UpdateAppVersionBodyDTO} UpdateAppVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAppVersion(platform: 'ANDROID' | 'IOS', version: string, UpdateAppVersionBodyDTO: UpdateAppVersionBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAppVersion(platform, version, UpdateAppVersionBodyDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 修改遊戲加成活動
         * @param {number} id 
         * @param {UpdateGameBonusActivityBodyDTO} UpdateGameBonusActivityBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGameBonusActivity(id: number, UpdateGameBonusActivityBodyDTO: UpdateGameBonusActivityBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGameBonusActivity(id, UpdateGameBonusActivityBodyDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新系統狀態
         * @param {UpdateSystemControllerBodyDTO} UpdateSystemControllerBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSystemController(UpdateSystemControllerBodyDTO: UpdateSystemControllerBodyDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemControllerAO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSystemController(UpdateSystemControllerBodyDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1SystemsApi - factory interface
 * @export
 */
export const V1SystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1SystemsApiFp(configuration)
    return {
        /**
         * currentAppVersion: 目前版本，無值表示無此版本資訊newestAppVersion: 需要更新的 APP 版本，無值表示無更新版本．newestAppAssetBundleVersion: 目前 APP 版本最新的資源包版本，無值表示沒有資源包版本
         * @summary 檢查及取得系統狀態及APP 版本
         * @param {CheckAndFindSystemControllerAndAppVersionBodyDTO} CheckAndFindSystemControllerAndAppVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAndFindSystemControllerAndAppVersion(CheckAndFindSystemControllerAndAppVersionBodyDTO: CheckAndFindSystemControllerAndAppVersionBodyDTO, options?: any): AxiosPromise<CheckAndFindSystemControllerAndAppVersionAO> {
            return localVarFp.checkAndFindSystemControllerAndAppVersion(CheckAndFindSystemControllerAndAppVersionBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增 APP 資源包版本
         * @param {CreateAppAssetBundleVersionBodyDTO} CreateAppAssetBundleVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppAssetBundleVersion(CreateAppAssetBundleVersionBodyDTO: CreateAppAssetBundleVersionBodyDTO, options?: any): AxiosPromise<void> {
            return localVarFp.createAppAssetBundleVersion(CreateAppAssetBundleVersionBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增 APP 版本
         * @param {CreateAppVersionBodyDTO} CreateAppVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppVersion(CreateAppVersionBodyDTO: CreateAppVersionBodyDTO, options?: any): AxiosPromise<void> {
            return localVarFp.createAppVersion(CreateAppVersionBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增遊戲加成活動
         * @param {CreateGameBonusActivityBodyDTO} CreateGameBonusActivityBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGameBonusActivity(CreateGameBonusActivityBodyDTO: CreateGameBonusActivityBodyDTO, options?: any): AxiosPromise<void> {
            return localVarFp.createGameBonusActivity(CreateGameBonusActivityBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除 APP 資源包版本
         * @param {'ANDROID' | 'IOS'} platform 設備平台
         * @param {string} version 版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppAssetBundleVersion(platform: 'ANDROID' | 'IOS', version: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAppAssetBundleVersion(platform, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除 APP 版本
         * @param {'ANDROID' | 'IOS'} platform 設備平台
         * @param {string} version 版本
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAppVersion(platform: 'ANDROID' | 'IOS', version: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAppVersion(platform, version, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除遊戲加成活動
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGameBonusActivity(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGameBonusActivity(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 APP 資源包版本列表
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {'ANDROID' | 'IOS'} [platform] 設備平台
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAppAssetBundleVersions(limit?: number, offset?: number, platform?: 'ANDROID' | 'IOS', options?: any): AxiosPromise<FindAssetBundleVersionsAO> {
            return localVarFp.findAppAssetBundleVersions(limit, offset, platform, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得APP 版本列表
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAppVersions(limit?: number, offset?: number, options?: any): AxiosPromise<FindAppVersionsAO> {
            return localVarFp.findAppVersions(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得遊戲加成活動列表
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findGameBonusActivities(limit?: number, offset?: number, options?: any): AxiosPromise<FindGameBonusActivitiesAO> {
            return localVarFp.findGameBonusActivities(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得進行中的遊戲加成活動
         * @param {FindOneOngoingGameBonusActivityBodyDTO} FindOneOngoingGameBonusActivityBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOneOngoingGameBonusActivity(FindOneOngoingGameBonusActivityBodyDTO: FindOneOngoingGameBonusActivityBodyDTO, options?: any): AxiosPromise<GameBonusActivityAO> {
            return localVarFp.findOneOngoingGameBonusActivity(FindOneOngoingGameBonusActivityBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得系統狀態
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSystemController(options?: any): AxiosPromise<SystemControllerAO> {
            return localVarFp.findSystemController(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改 APP 資源包版本
         * @param {'ANDROID' | 'IOS'} platform 設備平台
         * @param {string} version 版本
         * @param {UpdateAppBundleVersionBodyDTO} UpdateAppBundleVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppAssetBundleVersion(platform: 'ANDROID' | 'IOS', version: string, UpdateAppBundleVersionBodyDTO: UpdateAppBundleVersionBodyDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateAppAssetBundleVersion(platform, version, UpdateAppBundleVersionBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改 APP 版本
         * @param {'ANDROID' | 'IOS'} platform 設備平台
         * @param {string} version 版本
         * @param {UpdateAppVersionBodyDTO} UpdateAppVersionBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAppVersion(platform: 'ANDROID' | 'IOS', version: string, UpdateAppVersionBodyDTO: UpdateAppVersionBodyDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateAppVersion(platform, version, UpdateAppVersionBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改遊戲加成活動
         * @param {number} id 
         * @param {UpdateGameBonusActivityBodyDTO} UpdateGameBonusActivityBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGameBonusActivity(id: number, UpdateGameBonusActivityBodyDTO: UpdateGameBonusActivityBodyDTO, options?: any): AxiosPromise<void> {
            return localVarFp.updateGameBonusActivity(id, UpdateGameBonusActivityBodyDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新系統狀態
         * @param {UpdateSystemControllerBodyDTO} UpdateSystemControllerBodyDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSystemController(UpdateSystemControllerBodyDTO: UpdateSystemControllerBodyDTO, options?: any): AxiosPromise<SystemControllerAO> {
            return localVarFp.updateSystemController(UpdateSystemControllerBodyDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1SystemsApi - object-oriented interface
 * @export
 * @class V1SystemsApi
 * @extends {BaseAPI}
 */
export class V1SystemsApi extends BaseAPI {
    /**
     * currentAppVersion: 目前版本，無值表示無此版本資訊newestAppVersion: 需要更新的 APP 版本，無值表示無更新版本．newestAppAssetBundleVersion: 目前 APP 版本最新的資源包版本，無值表示沒有資源包版本
     * @summary 檢查及取得系統狀態及APP 版本
     * @param {CheckAndFindSystemControllerAndAppVersionBodyDTO} CheckAndFindSystemControllerAndAppVersionBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public checkAndFindSystemControllerAndAppVersion(CheckAndFindSystemControllerAndAppVersionBodyDTO: CheckAndFindSystemControllerAndAppVersionBodyDTO, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).checkAndFindSystemControllerAndAppVersion(CheckAndFindSystemControllerAndAppVersionBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增 APP 資源包版本
     * @param {CreateAppAssetBundleVersionBodyDTO} CreateAppAssetBundleVersionBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public createAppAssetBundleVersion(CreateAppAssetBundleVersionBodyDTO: CreateAppAssetBundleVersionBodyDTO, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).createAppAssetBundleVersion(CreateAppAssetBundleVersionBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增 APP 版本
     * @param {CreateAppVersionBodyDTO} CreateAppVersionBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public createAppVersion(CreateAppVersionBodyDTO: CreateAppVersionBodyDTO, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).createAppVersion(CreateAppVersionBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增遊戲加成活動
     * @param {CreateGameBonusActivityBodyDTO} CreateGameBonusActivityBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public createGameBonusActivity(CreateGameBonusActivityBodyDTO: CreateGameBonusActivityBodyDTO, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).createGameBonusActivity(CreateGameBonusActivityBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除 APP 資源包版本
     * @param {'ANDROID' | 'IOS'} platform 設備平台
     * @param {string} version 版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public deleteAppAssetBundleVersion(platform: 'ANDROID' | 'IOS', version: string, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).deleteAppAssetBundleVersion(platform, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除 APP 版本
     * @param {'ANDROID' | 'IOS'} platform 設備平台
     * @param {string} version 版本
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public deleteAppVersion(platform: 'ANDROID' | 'IOS', version: string, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).deleteAppVersion(platform, version, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除遊戲加成活動
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public deleteGameBonusActivity(id: number, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).deleteGameBonusActivity(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 APP 資源包版本列表
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {'ANDROID' | 'IOS'} [platform] 設備平台
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public findAppAssetBundleVersions(limit?: number, offset?: number, platform?: 'ANDROID' | 'IOS', options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).findAppAssetBundleVersions(limit, offset, platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得APP 版本列表
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public findAppVersions(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).findAppVersions(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得遊戲加成活動列表
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public findGameBonusActivities(limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).findGameBonusActivities(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得進行中的遊戲加成活動
     * @param {FindOneOngoingGameBonusActivityBodyDTO} FindOneOngoingGameBonusActivityBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public findOneOngoingGameBonusActivity(FindOneOngoingGameBonusActivityBodyDTO: FindOneOngoingGameBonusActivityBodyDTO, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).findOneOngoingGameBonusActivity(FindOneOngoingGameBonusActivityBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得系統狀態
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public findSystemController(options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).findSystemController(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改 APP 資源包版本
     * @param {'ANDROID' | 'IOS'} platform 設備平台
     * @param {string} version 版本
     * @param {UpdateAppBundleVersionBodyDTO} UpdateAppBundleVersionBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public updateAppAssetBundleVersion(platform: 'ANDROID' | 'IOS', version: string, UpdateAppBundleVersionBodyDTO: UpdateAppBundleVersionBodyDTO, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).updateAppAssetBundleVersion(platform, version, UpdateAppBundleVersionBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改 APP 版本
     * @param {'ANDROID' | 'IOS'} platform 設備平台
     * @param {string} version 版本
     * @param {UpdateAppVersionBodyDTO} UpdateAppVersionBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public updateAppVersion(platform: 'ANDROID' | 'IOS', version: string, UpdateAppVersionBodyDTO: UpdateAppVersionBodyDTO, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).updateAppVersion(platform, version, UpdateAppVersionBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改遊戲加成活動
     * @param {number} id 
     * @param {UpdateGameBonusActivityBodyDTO} UpdateGameBonusActivityBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public updateGameBonusActivity(id: number, UpdateGameBonusActivityBodyDTO: UpdateGameBonusActivityBodyDTO, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).updateGameBonusActivity(id, UpdateGameBonusActivityBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新系統狀態
     * @param {UpdateSystemControllerBodyDTO} UpdateSystemControllerBodyDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1SystemsApi
     */
    public updateSystemController(UpdateSystemControllerBodyDTO: UpdateSystemControllerBodyDTO, options?: AxiosRequestConfig) {
        return V1SystemsApiFp(this.configuration).updateSystemController(UpdateSystemControllerBodyDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


